[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "Mesure",
        "importPath": "your_app_name.models",
        "description": "your_app_name.models",
        "isExtraImport": true,
        "detail": "your_app_name.models",
        "documentation": {}
    },
    {
        "label": "CustomUser",
        "importPath": "your_app_name.models",
        "description": "your_app_name.models",
        "isExtraImport": true,
        "detail": "your_app_name.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "format_suffix_patterns",
        "importPath": "rest_framework.urlpatterns",
        "description": "rest_framework.urlpatterns",
        "isExtraImport": true,
        "detail": "rest_framework.urlpatterns",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "BACKENDSEGGTECH.asgi",
        "description": "BACKENDSEGGTECH.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "BACKENDSEGGTECH.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "BACKENDSEGGTECH.settings",
        "description": "BACKENDSEGGTECH.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-id)vah!86$0p1y5ri%uj0+11lw%9@!^gqv@jp6!l@68a(dm&l5'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "BACKENDSEGGTECH.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "BACKENDSEGGTECH.settings",
        "description": "BACKENDSEGGTECH.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-id)vah!86$0p1y5ri%uj0+11lw%9@!^gqv@jp6!l@68a(dm&l5'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "BACKENDSEGGTECH.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "BACKENDSEGGTECH.settings",
        "description": "BACKENDSEGGTECH.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "BACKENDSEGGTECH.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "BACKENDSEGGTECH.settings",
        "description": "BACKENDSEGGTECH.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework'",
        "detail": "BACKENDSEGGTECH.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "BACKENDSEGGTECH.settings",
        "description": "BACKENDSEGGTECH.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework'\n]\nMIDDLEWARE = [",
        "detail": "BACKENDSEGGTECH.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "BACKENDSEGGTECH.settings",
        "description": "BACKENDSEGGTECH.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'BACKENDSEGGTECH.urls'",
        "detail": "BACKENDSEGGTECH.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "BACKENDSEGGTECH.settings",
        "description": "BACKENDSEGGTECH.settings",
        "peekOfCode": "ROOT_URLCONF = 'BACKENDSEGGTECH.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "BACKENDSEGGTECH.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "BACKENDSEGGTECH.settings",
        "description": "BACKENDSEGGTECH.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "BACKENDSEGGTECH.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "BACKENDSEGGTECH.settings",
        "description": "BACKENDSEGGTECH.settings",
        "peekOfCode": "WSGI_APPLICATION = 'BACKENDSEGGTECH.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'seggtech',\n        'USER': 'postgres',\n        'PASSWORD': 'root',\n        'HOST': 'localhost',  # Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.",
        "detail": "BACKENDSEGGTECH.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "BACKENDSEGGTECH.settings",
        "description": "BACKENDSEGGTECH.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'seggtech',\n        'USER': 'postgres',\n        'PASSWORD': 'root',\n        'HOST': 'localhost',  # Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.\n        'PORT': '5432'\n    }\n}",
        "detail": "BACKENDSEGGTECH.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "BACKENDSEGGTECH.settings",
        "description": "BACKENDSEGGTECH.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "BACKENDSEGGTECH.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "BACKENDSEGGTECH.settings",
        "description": "BACKENDSEGGTECH.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "BACKENDSEGGTECH.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "BACKENDSEGGTECH.settings",
        "description": "BACKENDSEGGTECH.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "BACKENDSEGGTECH.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "BACKENDSEGGTECH.settings",
        "description": "BACKENDSEGGTECH.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "BACKENDSEGGTECH.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "BACKENDSEGGTECH.settings",
        "description": "BACKENDSEGGTECH.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "BACKENDSEGGTECH.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "BACKENDSEGGTECH.settings",
        "description": "BACKENDSEGGTECH.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "BACKENDSEGGTECH.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "BACKENDSEGGTECH.settings",
        "description": "BACKENDSEGGTECH.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "BACKENDSEGGTECH.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "BACKENDSEGGTECH.urls",
        "description": "BACKENDSEGGTECH.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('seggtech.urls')),\n]",
        "detail": "BACKENDSEGGTECH.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "BACKENDSEGGTECH.wsgi",
        "description": "BACKENDSEGGTECH.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "BACKENDSEGGTECH.wsgi",
        "documentation": {}
    },
    {
        "label": "SeggtechConfig",
        "kind": 6,
        "importPath": "seggtech.apps",
        "description": "seggtech.apps",
        "peekOfCode": "class SeggtechConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'seggtech'",
        "detail": "seggtech.apps",
        "documentation": {}
    },
    {
        "label": "Mesure",
        "kind": 6,
        "importPath": "seggtech.models",
        "description": "seggtech.models",
        "peekOfCode": "class Mesure(models.Model):\n    timestamp = models.DateTimeField(default=timezone.now)\n    temperature = models.FloatField(null=True)\n    tds = models.FloatField(null=True)\n    turbidite = models.FloatField(null=True, blank=True)\n    ph = models.FloatField(null=True)\n    conductivite = models.FloatField(null=True)\n    oxygene = models.FloatField(null=True)\n    def __str__(self):\n        return f'Mesure du {self.timestamp}: Temperature: {self.temperature}, TDS={self.tds}, Turbidite: {self.turbidite}, pH: {self.ph}, Conductivite: {self.conductivite}, Oxygène: {self.oxygene}'",
        "detail": "seggtech.models",
        "documentation": {}
    },
    {
        "label": "CustomUser",
        "kind": 6,
        "importPath": "seggtech.models",
        "description": "seggtech.models",
        "peekOfCode": "class CustomUser(AbstractUser):\n    NMA = 'NMA'\n    PRODEME = 'PRODEME'\n    USER_TYPE_CHOICES = [\n        (NMA, 'NMA'),\n        (PRODEME, 'PRODEME'),\n    ]\n    username = None\n    email = models.EmailField(_('email address'), unique=True)\n    first_name = models.CharField(_('first name'), max_length=150)",
        "detail": "seggtech.models",
        "documentation": {}
    },
    {
        "label": "MesureSerializer",
        "kind": 6,
        "importPath": "seggtech.serializers",
        "description": "seggtech.serializers",
        "peekOfCode": "class MesureSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Mesure\n        fields = '__all__'\nclass CustomUserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CustomUser\n        fields = '__all__'",
        "detail": "seggtech.serializers",
        "documentation": {}
    },
    {
        "label": "CustomUserSerializer",
        "kind": 6,
        "importPath": "seggtech.serializers",
        "description": "seggtech.serializers",
        "peekOfCode": "class CustomUserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CustomUser\n        fields = '__all__'",
        "detail": "seggtech.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "seggtech.urls",
        "description": "seggtech.urls",
        "peekOfCode": "urlpatterns = [\n    path('api/mesures/', mesure_list, name='mesure-list'),\n    path('api/mesures/<int:id>/', mesure_detail, name='mesure-detail'),\n    path('api/users/', user_list, name='user-list'),\n    path('api/users/<int:id>/', user_detail, name='user-detail'),\n]\n# Ajout des suffixes de format aux URLs (par exemple, .json, .api)\nurlpatterns = format_suffix_patterns(urlpatterns)",
        "detail": "seggtech.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "seggtech.urls",
        "description": "seggtech.urls",
        "peekOfCode": "urlpatterns = format_suffix_patterns(urlpatterns)",
        "detail": "seggtech.urls",
        "documentation": {}
    },
    {
        "label": "mesure_list",
        "kind": 2,
        "importPath": "seggtech.views",
        "description": "seggtech.views",
        "peekOfCode": "def mesure_list(request):\n    if request.method == 'GET':\n        mesures = Mesure.objects.all()\n        serializer = MesureSerializer(mesures, many=True)\n        return Response(serializer.data)\n    elif request.method == 'POST':\n        serializer = MesureSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "seggtech.views",
        "documentation": {}
    },
    {
        "label": "mesure_detail",
        "kind": 2,
        "importPath": "seggtech.views",
        "description": "seggtech.views",
        "peekOfCode": "def mesure_detail(request, id):\n    try:\n        mesure = Mesure.objects.get(pk=id)\n    except Mesure.DoesNotExist:\n        return Response(status=status.HTTP_404_NOT_FOUND)\n    if request.method == 'GET':\n        serializer = MesureSerializer(mesure)\n        return Response(serializer.data)\n    elif request.method == 'PUT':\n        serializer = MesureSerializer(mesure, data=request.data)",
        "detail": "seggtech.views",
        "documentation": {}
    },
    {
        "label": "user_list",
        "kind": 2,
        "importPath": "seggtech.views",
        "description": "seggtech.views",
        "peekOfCode": "def user_list(request):\n    if request.method == 'GET':\n        users = CustomUser.objects.all()\n        serializer = CustomUserSerializer(users, many=True)\n        return Response(serializer.data)\n    elif request.method == 'POST':\n        serializer = CustomUserSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "seggtech.views",
        "documentation": {}
    },
    {
        "label": "user_detail",
        "kind": 2,
        "importPath": "seggtech.views",
        "description": "seggtech.views",
        "peekOfCode": "def user_detail(request, id):\n    try:\n        user = CustomUser.objects.get(pk=id)\n    except CustomUser.DoesNotExist:\n        return Response(status=status.HTTP_404_NOT_FOUND)\n    if request.method == 'GET':\n        serializer = CustomUserSerializer(user)\n        return Response(serializer.data)\n    elif request.method == 'PUT':\n        serializer = CustomUserSerializer(user, data=request.data)",
        "detail": "seggtech.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'BACKENDSEGGTECH.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]